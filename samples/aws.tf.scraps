provider "aws" {
  profile = "dev"
  region  = "us-east-1"
}


resource "aws_iam_policy" "na-cm-connector-policy" {
  name        = "na-cm-connector"
  path        = "/"
  description = "NetApp CloudManager Connector deployment policy"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [{
            "Effect": "Allow",
            "Action": [
                "iam:CreateRole",
                "iam:DeleteRole",
                "iam:PutRolePolicy",
                "iam:CreateInstanceProfile",
                "iam:DeleteRolePolicy",
                "iam:AddRoleToInstanceProfile",
                "iam:RemoveRoleFromInstanceProfile",
                "iam:DeleteInstanceProfile",
                "iam:PassRole",
                "ec2:DescribeInstanceStatus",
                "ec2:RunInstances",
                "ec2:ModifyInstanceAttribute",
                "ec2:CreateSecurityGroup",
                "ec2:DeleteSecurityGroup",
                "ec2:DescribeSecurityGroups",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:RevokeSecurityGroupIngress",
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "ec2:DescribeDhcpOptions",
                "ec2:DescribeKeyPairs",
                "ec2:DescribeRegions",
                "ec2:DescribeInstances",
                "ec2:CreateTags",
                "ec2:DescribeImages",
                "cloudformation:CreateStack",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackEvents",
                "cloudformation:ValidateTemplate",
                "ec2:AssociateIamInstanceProfile",
                "ec2:DescribeIamInstanceProfileAssociations",
                "ec2:DisassociateIamInstanceProfile"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:TerminateInstances"
            ],
            "Condition": {
                "StringLike": {
                    "ec2:ResourceTag/OCCMInstance": "*"
                }
            },
            "Resource": [
                "arn:aws:ec2:*:*:instance/*"
            ]
        }
    ]
}
EOF
}

resource "aws_iam_role" "na-occm-role" {
  name = "na-occm-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF

  tags = {
    Name = "na-occm-role"
    Project = "Infrastructure"
  }
}


resource "aws_iam_group" "na-cm-connector-group" {
  name = "na-cm-connector-group"
}

resource "aws_iam_group_policy_attachment" "na-cm-connector-attachment" {
  group = aws_iam_group.na-cm-connector-group.name
  policy_arn = aws_iam_policy.na-cm-connector-policy.arn
}

resource "aws_iam_user" "na-cm-user" {
  name = "na-cm-user"
  path = "/"

  tags = {
    Name = "na-cm-user"
    Project = "Infrastructure"
  }
}

resource "aws_iam_group_membership" "group" {
  name = "na-cm-connector-group-membership"

  users = [
    aws_iam_user.na-cm-user.name
  ]

  group = aws_iam_group.na-cm-connector-group.name
}

resource "aws_iam_access_key" "access-key" {
  user = aws_iam_user.na-cm-user.name
}

output "access-key-id" {
  value = aws_iam_access_key.access-key.id
}

output "access-key-secret" {
  value = aws_iam_access_key.access-key.secret
}
